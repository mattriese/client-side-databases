export default [
  {
    "statements": [
      "CREATE TABLE \"users\" (\n  \"id\" TEXT NOT NULL,\n  \"created_at\" INTEGER,\n  CONSTRAINT \"users_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"messages\" (\n  \"id\" TEXT NOT NULL,\n  \"text\" TEXT NOT NULL,\n  \"created_at\" INTEGER NOT NULL,\n  \"read\" INTEGER NOT NULL,\n  \"sender\" TEXT NOT NULL,\n  \"receiver\" TEXT NOT NULL,\n  CONSTRAINT \"messages_receiver_fkey\" FOREIGN KEY (\"receiver\") REFERENCES \"users\" (\"id\"),\n  CONSTRAINT \"messages_sender_fkey\" FOREIGN KEY (\"sender\") REFERENCES \"users\" (\"id\"),\n  CONSTRAINT \"messages_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"idx_messages_created_at\" ON \"messages\" (\"created_at\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.users', 1);",
      "  /* Triggers for table users */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_users_primarykey;",
      "CREATE TRIGGER update_ensure_main_users_primarykey\n  BEFORE UPDATE ON \"main\".\"users\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_users_into_oplog;",
      "CREATE TRIGGER insert_main_users_into_oplog\n   AFTER INSERT ON \"main\".\"users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', cast(new.\"created_at\" as TEXT), 'id', new.\"id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_users_into_oplog;",
      "CREATE TRIGGER update_main_users_into_oplog\n   AFTER UPDATE ON \"main\".\"users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', cast(new.\"created_at\" as TEXT), 'id', new.\"id\"), json_object('created_at', cast(old.\"created_at\" as TEXT), 'id', old.\"id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_users_into_oplog;",
      "CREATE TRIGGER delete_main_users_into_oplog\n   AFTER DELETE ON \"main\".\"users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', cast(old.\"created_at\" as TEXT), 'id', old.\"id\"), NULL);\nEND;",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.messages', 1);",
      "  /* Triggers for table messages */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_messages_primarykey;",
      "CREATE TRIGGER update_ensure_main_messages_primarykey\n  BEFORE UPDATE ON \"main\".\"messages\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_messages_into_oplog;",
      "CREATE TRIGGER insert_main_messages_into_oplog\n   AFTER INSERT ON \"main\".\"messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'messages', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', cast(new.\"created_at\" as TEXT), 'id', new.\"id\", 'read', new.\"read\", 'receiver', new.\"receiver\", 'sender', new.\"sender\", 'text', new.\"text\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_messages_into_oplog;",
      "CREATE TRIGGER update_main_messages_into_oplog\n   AFTER UPDATE ON \"main\".\"messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'messages', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', cast(new.\"created_at\" as TEXT), 'id', new.\"id\", 'read', new.\"read\", 'receiver', new.\"receiver\", 'sender', new.\"sender\", 'text', new.\"text\"), json_object('created_at', cast(old.\"created_at\" as TEXT), 'id', old.\"id\", 'read', old.\"read\", 'receiver', old.\"receiver\", 'sender', old.\"sender\", 'text', old.\"text\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_messages_into_oplog;",
      "CREATE TRIGGER delete_main_messages_into_oplog\n   AFTER DELETE ON \"main\".\"messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'messages', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', cast(old.\"created_at\" as TEXT), 'id', old.\"id\", 'read', old.\"read\", 'receiver', old.\"receiver\", 'sender', old.\"sender\", 'text', old.\"text\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_messages_receiver_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_messages_receiver_into_oplog\n  AFTER INSERT ON \"main\".\"messages\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"id\" = new.\"receiver\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_messages_receiver_into_oplog;",
      "CREATE TRIGGER compensation_update_main_messages_receiver_into_oplog\n   AFTER UPDATE ON \"main\".\"messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"id\" = new.\"receiver\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_messages_sender_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_messages_sender_into_oplog\n  AFTER INSERT ON \"main\".\"messages\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"id\" = new.\"sender\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_messages_sender_into_oplog;",
      "CREATE TRIGGER compensation_update_main_messages_sender_into_oplog\n   AFTER UPDATE ON \"main\".\"messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"id\" = new.\"sender\";\nEND;"
    ],
    "version": "1"
  }
]